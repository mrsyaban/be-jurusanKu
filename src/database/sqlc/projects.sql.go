// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: projects.sql

package database

import (
	"context"
)

const createDummyProject = `-- name: CreateDummyProject :one
INSERT INTO projects (
    course_id,
    image_url,
    content_url
) VALUES (
    1,
    'https://sample.dummy',
    'https://sample.dummy'
) RETURNING id, course_id, image_url, content_url
`

func (q *Queries) CreateDummyProject(ctx context.Context) (Projects, error) {
	row := q.db.QueryRowContext(ctx, createDummyProject)
	var i Projects
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.ImageUrl,
		&i.ContentUrl,
	)
	return i, err
}

const getProjectByCourseId = `-- name: GetProjectByCourseId :many
SELECT id, course_id, image_url, content_url 
FROM projects 
WHERE course_id = $1
`

func (q *Queries) GetProjectByCourseId(ctx context.Context, courseID int64) ([]Projects, error) {
	rows, err := q.db.QueryContext(ctx, getProjectByCourseId, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Projects
	for rows.Next() {
		var i Projects
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.ImageUrl,
			&i.ContentUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
