// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: courses.sql

package database

import (
	"context"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (
    title,
    "desc",
    "major_id"
) VALUES (
    'Computer Science',
    'The study of computers and their applications',
    1
) RETURNING id, title, "desc", major_id
`

func (q *Queries) CreateCourse(ctx context.Context) (Courses, error) {
	row := q.db.QueryRowContext(ctx, createCourse)
	var i Courses
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Desc,
		&i.MajorID,
	)
	return i, err
}

const getCourseByMajorId = `-- name: GetCourseByMajorId :one
SELECT id, title, "desc", major_id FROM courses WHERE major_id = $1
`

func (q *Queries) GetCourseByMajorId(ctx context.Context, majorID int32) (Courses, error) {
	row := q.db.QueryRowContext(ctx, getCourseByMajorId, majorID)
	var i Courses
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Desc,
		&i.MajorID,
	)
	return i, err
}

const getCourses = `-- name: GetCourses :many
SELECT id, title, "desc", major_id FROM courses
`

func (q *Queries) GetCourses(ctx context.Context) ([]Courses, error) {
	rows, err := q.db.QueryContext(ctx, getCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Courses
	for rows.Next() {
		var i Courses
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Desc,
			&i.MajorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
