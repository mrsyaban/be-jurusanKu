// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: majors.sql

package database

import (
	"context"
)

const createMajor = `-- name: CreateMajor :one
INSERT INTO majors (
    title,
    "desc"
) VALUES (
    'Computer Science',
    'The study of computers and their applications'
) RETURNING id, title, "desc"
`

func (q *Queries) CreateMajor(ctx context.Context) (Majors, error) {
	row := q.db.QueryRowContext(ctx, createMajor)
	var i Majors
	err := row.Scan(&i.ID, &i.Title, &i.Desc)
	return i, err
}

const getMajors = `-- name: GetMajors :many
SELECT id, title, "desc" FROM majors
`

func (q *Queries) GetMajors(ctx context.Context) ([]Majors, error) {
	rows, err := q.db.QueryContext(ctx, getMajors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Majors
	for rows.Next() {
		var i Majors
		if err := rows.Scan(&i.ID, &i.Title, &i.Desc); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
