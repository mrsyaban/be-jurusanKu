// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: enrollment.sql

package database

import (
	"context"
)

const addEnrollment = `-- name: AddEnrollment :one
INSERT INTO enrollment (
    user_email,
    course_id
) VALUES (
    $1,
    $2
) RETURNING user_email, course_id
`

type AddEnrollmentParams struct {
	UserEmail string `json:"user_email"`
	CourseID  int64  `json:"course_id"`
}

func (q *Queries) AddEnrollment(ctx context.Context, arg AddEnrollmentParams) (Enrollment, error) {
	row := q.db.QueryRowContext(ctx, addEnrollment, arg.UserEmail, arg.CourseID)
	var i Enrollment
	err := row.Scan(&i.UserEmail, &i.CourseID)
	return i, err
}

const getActiveCourse = `-- name: GetActiveCourse :many
SELECT course_id 
FROM enrollment 
WHERE user_email = $1
`

func (q *Queries) GetActiveCourse(ctx context.Context, userEmail string) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getActiveCourse, userEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var course_id int64
		if err := rows.Scan(&course_id); err != nil {
			return nil, err
		}
		items = append(items, course_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
